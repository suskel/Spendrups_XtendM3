{"programModules":{"EXT101MI":{"program":"EXT101MI","triggers":{},"transactions":{"LstWeigPerPac":{"sourceUuid":"5e322ce5-1d24-4627-9656-6c01c829d5b0","name":"LstWeigPerPac","program":"EXT101MI","description":"Sum of weights and specifikation on package types in MMS101","active":true,"multi":true,"modified":1752561397836,"modifiedBy":"EXT_SK","outputFields":[{"name":"TRNR","description":"Ordernumber","length":10,"mandatory":false,"type":"A","refField":null},{"name":"CODE","description":"Pantkod","length":10,"mandatory":false,"type":"A","refField":null},{"name":"ITDS","description":"Pantkod description","length":30,"mandatory":false,"type":"A","refField":null},{"name":"TRQT","description":"Quantity","length":17,"mandatory":false,"type":"N","refField":null},{"name":"GRWE","description":"Weight","length":17,"mandatory":false,"type":"N","refField":null},{"name":"TOTQ","description":"Total qty","length":17,"mandatory":false,"type":"N","refField":null},{"name":"NBPA","description":"Number of pallet","length":7,"mandatory":false,"type":"N","refField":null}],"inputFields":[{"name":"TRNR","description":"Ordernumber","length":10,"mandatory":true,"type":"A","refField":null}],"utilities":[],"market":"ALL"}},"batches":{},"advancedPrograms":{}}},"utilities":{},"sources":{"5e322ce5-1d24-4627-9656-6c01c829d5b0":{"uuid":"5e322ce5-1d24-4627-9656-6c01c829d5b0","updated":1752561516283,"updatedBy":"EXT_SK","created":1744062194224,"createdBy":"EXT_SK","apiVersion":"0.21","beVersion":"16.0.0.20250521011729.6","language":"GROOVY","codeHash":"003355EB66CF2A16AEF89415CDEABD5D0D41A117BC688EF036E28BF88F172D4A","code":""}}}