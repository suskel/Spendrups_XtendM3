{"programModules":{"EXT100MI":{"program":"EXT100MI","triggers":{},"transactions":{"UpdPackageAlias":{"sourceUuid":"50055a7a-7ff4-472b-8010-e065193d67d9","name":"UpdPackageAlias","program":"EXT100MI","description":"Update MPTRNS with PAN1-3","active":true,"multi":false,"modified":1746633907013,"modifiedBy":"EXT_SK","outputFields":[],"inputFields":[{"name":"DIPA","description":"Discconnected package","length":1,"mandatory":true,"type":"N","refField":null},{"name":"WHLO","description":"Warehouse","length":3,"mandatory":false,"type":"A","refField":null},{"name":"DLIX","description":"Delivery","length":11,"mandatory":true,"type":"N","refField":null},{"name":"PANR","description":"Package number","length":20,"mandatory":true,"type":"A","refField":null},{"name":"PAN1","description":"Package alias 1","length":30,"mandatory":false,"type":"A","refField":null},{"name":"PAN2","description":"Package alias 2","length":30,"mandatory":false,"type":"A","refField":null},{"name":"PAN3","description":"Package alias 3","length":30,"mandatory":false,"type":"A","refField":null}],"utilities":[],"market":"ALL"}},"batches":{},"advancedPrograms":{}}},"utilities":{},"sources":{"50055a7a-7ff4-472b-8010-e065193d67d9":{"uuid":"50055a7a-7ff4-472b-8010-e065193d67d9","updated":1752560812204,"updatedBy":"EXT_SK","created":1746631971317,"createdBy":"EXT_SK","apiVersion":"0.15","beVersion":"16.0.0.20250521011729.6","language":"GROOVY","codeHash":"03321F3770583D61B502CF40578D4EB8C519ECCC81DDA6C490BAF54B0485CF36","code":"LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCiBFeHRlbnNpb24gTmFtZTogRVhUMTAwTUkvVXBkUGFja2FnZUFsaWFzDQogVHlwZTogRXh0ZW5kTTNUcmFuc2FjdGlvbg0KIFNjcmlwdCBBdXRob3I6IFN1c2FubmEgS2VsbGFuZGVyIC0gRWx2ZW5pdGUNCiBEYXRlOiAyMDI1LTA1LTA3DQogRGVzY3JpcHRpb246IFVwZGF0ZSBNUFRSTlMuUEFOMS0zLCBubyBBUEkgaW4gc3RhbmRhcmQuIEVSIDExOTI3MSBleGlzdA0KDQogUmV2aXNpb24gSGlzdG9yeToNCiBOYW1lICAgICAgICAgICAgICAgICAgICBEYXRlICAgICAgICAgICAgIFZlcnNpb24gICAgICAgICAgRGVzY3JpcHRpb24gb2YgQ2hhbmdlcw0KIFN1c2FubmEgS2VsbGFuZGVyICAgICAgIDIwMjUtMDUtMDcgICAgICAgMS4wICAgICAgICAgICAgICBTUDAwNDAgLSBVcGRhdGUgTVBUUk5TLlBBTjEtMywgbm8gQVBJIGluIHN0YW5kYXJkLiBFUiAxMTkyNzEgZXhpc3QNCioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8NCg0KaW1wb3J0IGphdmEudGltZS5Mb2NhbERhdGVUaW1lDQppbXBvcnQgamF2YS50aW1lLmZvcm1hdC5EYXRlVGltZUZvcm1hdHRlcg0KcHVibGljIGNsYXNzIFVwZFBhY2thZ2VBbGlhcyBleHRlbmRzIEV4dGVuZE0zVHJhbnNhY3Rpb24geyANCiAgcHJpdmF0ZSBmaW5hbCBNSUFQSSBtaQ0KICBwcml2YXRlIGZpbmFsIERhdGFiYXNlQVBJIGRhdGFiYXNlDQogIHByaXZhdGUgZmluYWwgUHJvZ3JhbUFQSSBwcm9ncmFtDQogIHByaXZhdGUgZmluYWwgTG9nZ2VyQVBJIGxvZ2dlcg0KICANCiAgaW50IGNvbXBhbnkgPSAwDQogIGxvbmcgZGVsaXZlcnkgPSAwDQogICAgDQogIA0KICBpbnQgZW50cnlEYXRlID0gMCANCiAgDQogIA0KICBwdWJsaWMgVXBkUGFja2FnZUFsaWFzKE1JQVBJIG1pLCBEYXRhYmFzZUFQSSBkYXRhYmFzZSwgUHJvZ3JhbUFQSSBwcm9ncmFtLCBMb2dnZXJBUEkgbG9nZ2VyKSB7DQogICAgdGhpcy5taSA9IG1pDQogICAgdGhpcy5kYXRhYmFzZSA9IGRhdGFiYXNlDQogICAgdGhpcy5wcm9ncmFtID0gcHJvZ3JhbQ0KICAgIHRoaXMubG9nZ2VyID0gbG9nZ2VyDQogIH0gICANCiAgDQogIC8qDQogICAgbWFpbiBtZXRob2QNCiAgKi8NCiAgcHVibGljIHZvaWQgbWFpbigpIHsgIA0KICAgIGlmKHJldHJpZXZlSW5wdXRQYXJhbWV0ZXJzKCkpIHsgDQogICAgICB1cGRhdGVNUFRSTlMocmVtb3ZlTnVsbGZyb21JbnRPYmplY3QobWkuaW4uZ2V0KCJESVBBIikpLCByZW1vdmVOdWxsZnJvbVN0cmluZ09iamVjdChtaS5pbi5nZXQoIldITE8iKSksIGRlbGl2ZXJ5LCByZW1vdmVOdWxsZnJvbVN0cmluZ09iamVjdChtaS5pbi5nZXQoIlBBTlIiKSkpDQogICAgfSANCiAgfSANCiAgIA0KICAvKg0KICAgIHVwZGF0ZU1QVFJOUyAtIHVwZGF0ZSBwYWNrYWdlIGFsaWFzDQogICovDQogIHB1YmxpYyB2b2lkIHVwZGF0ZU1QVFJOUyhpbnQgaW5ESVBBLCBTdHJpbmcgaW5XSExPLCBsb25nIGluRExJWCwgU3RyaW5nIGluUEFOUikgeyAgDQogICAgDQogIERCQWN0aW9uIHFyeU1QVFJOUyA9IGRhdGFiYXNlLnRhYmxlKCJNUFRSTlMiKS5pbmRleCgiMDAiKS5idWlsZCgpDQogIERCQ29udGFpbmVyIGNvbk1QVFJOUyA9IHFyeU1QVFJOUy5nZXRDb250YWluZXIoKQ0KICBjb25NUFRSTlMuc2V0KCJPUkNPTk8iLCBjb21wYW55KQ0KICBjb25NUFRSTlMuc2V0KCJPUkRJUEEiLCBpbkRJUEEpDQogIGNvbk1QVFJOUy5zZXQoIk9SV0hMTyIsIGluV0hMTykNCiAgY29uTVBUUk5TLnNldCgiT1JETElYIiwgaW5ETElYKQ0KICBjb25NUFRSTlMuc2V0KCJPUlBBTlIiLCBpblBBTlIpDQogIHFyeU1QVFJOUy5yZWFkTG9jayhjb25NUFRSTlMsIHVwZGF0ZUNhbGxCYWNrKSANCn0NCg0KICBDbG9zdXJlPD8+IHVwZGF0ZUNhbGxCYWNrID0geyBMb2NrZWRSZXN1bHQgbG9ja2VkUmVzdWx0IC0+DQoNCiAgICBsb2NrZWRSZXN1bHQuc2V0KCJPUlBBTjEiLCBnZXRTdHJpbmdGcm9tSW5wdXRQYXJhbWV0ZXIobWkuaW5EYXRhLmdldCgiUEFOMSIpLnRvU3RyaW5nKCksIChTdHJpbmcpbG9ja2VkUmVzdWx0LmdldCgiT1JQQU4xIikpKQ0KICAgIGxvY2tlZFJlc3VsdC5zZXQoIk9SUEFOMiIsIGdldFN0cmluZ0Zyb21JbnB1dFBhcmFtZXRlcihtaS5pbkRhdGEuZ2V0KCJQQU4yIikudG9TdHJpbmcoKSwgKFN0cmluZylsb2NrZWRSZXN1bHQuZ2V0KCJPUlBBTjIiKSkpDQogICAgbG9ja2VkUmVzdWx0LnNldCgiT1JQQU4zIiwgZ2V0U3RyaW5nRnJvbUlucHV0UGFyYW1ldGVyKG1pLmluRGF0YS5nZXQoIlBBTjMiKS50b1N0cmluZygpLCAoU3RyaW5nKWxvY2tlZFJlc3VsdC5nZXQoIk9SUEFOMyIpKSkNCiAgDQogICAgLy8gVXBkYXRlIGNoYW5nZWQgaW5mb3JtYXRpb24NCiAgICBpbnQgY2hhbmdlTm8gPSBsb2NrZWRSZXN1bHQuZ2V0KCJPUkNITk8iKQ0KICAgIGludCBuZXdDaGFuZ2VObyA9IGNoYW5nZU5vICsgMSANCiAgICBsb2NrZWRSZXN1bHQuc2V0KCJPUkxNRFQiLCBlbnRyeURhdGUpDQoNCiAgICBsb2NrZWRSZXN1bHQuc2V0KCJPUkNITk8iLCBuZXdDaGFuZ2VObykNCiAgICBsb2NrZWRSZXN1bHQuc2V0KCJPUkNISUQiLCBwcm9ncmFtLmdldFVzZXIoKSkNCiAgICBsb2NrZWRSZXN1bHQudXBkYXRlKCkNCiAgfSANCiAgDQogIA0KICAgIC8qDQogICAgcmV0cmlldmUgYW5kIGNoZWNrIGlucHV0IHBhcmFtZXRlcnMgDQoJKi8NCglib29sZWFuIHJldHJpZXZlSW5wdXRQYXJhbWV0ZXJzKCkgew0KCSAgDQoJCWNvbXBhbnkgPSAoSW50ZWdlcilwcm9ncmFtLmdldExEQVpEKCkuQ09OTyAgDQogICAgZGVsaXZlcnkgPSAgcmVtb3ZlTnVsbGZyb21Mb25nT2JqZWN0KG1pLmdldEluRGF0YSgpLmdldCgiRExJWCIpLnRyaW0oKSkgICAgICAgICAvLyB3cm9uZyBpbiB4dGVuZE0zIGZvdW5kYXRpb24NCg0KICAgDQogICANCiAgICBpZighY2hlY2tNUFRSTlMocmVtb3ZlTnVsbGZyb21JbnRPYmplY3QobWkuaW4uZ2V0KCJESVBBIikpLCByZW1vdmVOdWxsZnJvbVN0cmluZ09iamVjdChtaS5pbi5nZXQoIldITE8iKSksIGRlbGl2ZXJ5LCByZW1vdmVOdWxsZnJvbVN0cmluZ09iamVjdChtaS5pbi5nZXQoIlBBTlIiKSkpKXsNCiAgICAgIG1pLmVycm9yKCJUaGUgcGFja2FnZSAke3JlbW92ZU51bGxmcm9tU3RyaW5nT2JqZWN0KG1pLmluLmdldCgiUEFOUiIpKX0gZm9yIGRlbGl2ZXJ5ICR7ZGVsaXZlcnl9IGRvZXMgbm90IGV4aXN0IGluIE1QVFJOUyIpDQogICAgICByZXR1cm4gZmFsc2UNCiAgICB9DQogICAgDQogICAgDQogICAgcmV0cmlldmVUb2RheXNEYXRlKCkNCiAgICANCiAgICANCiAgICByZXR1cm4gdHJ1ZQ0KCX0NCgkNCgkNCiAgLyoNCiAgICBSZXR1cm4gdHJ1ZSBpZiByZWNvcmQgZXhpc3QuIA0KICAqLw0KICBib29sZWFuIGNoZWNrTVBUUk5TKGludCBpbkRJUEEsIFN0cmluZyBpbldITE8sIGxvbmcgaW5ETElYLCBTdHJpbmcgaW5QQU5SKSB7DQogICAgDQogICAgREJBY3Rpb24gcXVlcnkgPSBkYXRhYmFzZS50YWJsZSgiTVBUUk5TIikuaW5kZXgoIjAwIikuYnVpbGQoKSAgDQogICAgREJDb250YWluZXIgY29udGFpbmVyID0gcXVlcnkuZ2V0Q29udGFpbmVyKCkNCiAgICBjb250YWluZXIuc2V0KCJPUkNPTk8iLCBjb21wYW55KQ0KICAgIGNvbnRhaW5lci5zZXQoIk9SRElQQSIsIGluRElQQSkNCiAgICBjb250YWluZXIuc2V0KCJPUldITE8iLCBpbldITE8pDQogICAgY29udGFpbmVyLnNldCgiT1JETElYIiwgaW5ETElYKQ0KICAgIGNvbnRhaW5lci5zZXQoIk9SUEFOUiIsIGluUEFOUikNCiAgICAgIA0KICAgIGJvb2xlYW4gZm91bmQgPSBxdWVyeS5yZWFkKGNvbnRhaW5lcikNCiAgICANCiAgICBpZiAoIWZvdW5kKSAgew0KICAgICAgcmV0dXJuIGZhbHNlICANCiAgICB9DQogICAgIA0KICAgIHJldHVybiB0cnVlDQogIH0NCiAgDQogDQogIA0KICAvKg0KICAgIEdldCB0b2RheXMgZGF0ZQ0KICAqLw0KICBwdWJsaWMgdm9pZCByZXRyaWV2ZVRvZGF5c0RhdGUoKSB7DQogICAgTG9jYWxEYXRlVGltZSBkYXRlVGltZSA9IExvY2FsRGF0ZVRpbWUubm93KCkNCiAgICBlbnRyeURhdGUgPSBkYXRlVGltZS5mb3JtYXQoRGF0ZVRpbWVGb3JtYXR0ZXIub2ZQYXR0ZXJuKCJ5eXl5TU1kZCIpKS50b0ludGVnZXIoKSANCiAgfQ0KICANCiAgDQogIC8qDQogICAgY2hlY2sgaWYgZmllbGQgZnJvbSBNSSBpcyBudWxsLiBSZXR1cm4gemVybyBpbiB0aGF0IGNhc2UNCiAgKi8NCiAgaW50IHJlbW92ZU51bGxmcm9tSW50T2JqZWN0KE9iamVjdCBmaWVsZCl7DQogICAgIGlmIChmaWVsZCA9PSBudWxsKSB7ICANCiAgICAgICByZXR1cm4gMA0KICAgICB9IGVsc2Ugew0KICAgICAgIHJldHVybiAoaW50KSBmaWVsZA0KICAgICB9DQogICB9DQogIA0KIC8qDQogICAgY2hlY2sgaWYgZmllbGQgZnJvbSBNSSBpcyBudWxsLiBSZXR1cm4gemVybyBpbiB0aGF0IGNhc2UNCiAgKi8NCglsb25nIHJlbW92ZU51bGxmcm9tTG9uZ09iamVjdChTdHJpbmcgZmllbGQpew0KCQlpZiAoZmllbGQgPT0gbnVsbCkgeyAgDQoJCQlyZXR1cm4gMA0KCQkJfSBlbHNlIHsNCgkJCXJldHVybiBMb25nLnBhcnNlTG9uZyhmaWVsZCApIA0KCQl9DQoJfQ0KDQoNCiAgLyoNCiAgICBjaGVjayBpZiBmaWVsZCBmcm9tIE1JIGlzIG51bGwuIFJldHVybiB6ZXJvIGluIHRoYXQgY2FzZQ0KICAgKi8NCiAgICBTdHJpbmcgcmVtb3ZlTnVsbGZyb21TdHJpbmdPYmplY3QoT2JqZWN0IGZpZWxkKXsNCiAgICAgaWYgKGZpZWxkID09IG51bGwpIHsgIA0KICAgICAgIHJldHVybiAiIg0KICAgICB9IGVsc2Ugew0KICAgICAgIHJldHVybiBmaWVsZA0KICAgICB9DQogICB9DQogICAgIA0KICAvKg0KICAgIGdldCBpbnQgdmFsdWUgZnJvbSBpbnB1dCBwYXJhbWV0ZXIuIEhhbmRsZSBibGFuayB2YWx1ZXMgKG5vIHVwZGF0ZSkgYW5kID8gKHVwZGF0ZSB3aXRoIGJsYW5rKQ0KICAgIGlucHV0IHBhcmFtZXRlcnM6DQogICAgQHZhbHVlIC0gdmFsdWUgZnJvbSBNSSBpbnB1dCBwYXJhbWV0ZXINCiAgICBAZmllbGQgLSB2YWx1ZSBmcm9tIGRhdGFiYXNlICh1c2Ugd2hlbiBpbnB1dCBoYXMgYmxhbmsgdmFsdWUpDQogICovDQogIFN0cmluZyBnZXRTdHJpbmdGcm9tSW5wdXRQYXJhbWV0ZXIoU3RyaW5nIHZhbHVlLCBTdHJpbmcgZmllbGQpeyANCiAgICBpZiAodmFsdWUgPT0gbnVsbCB8fCB2YWx1ZS50cmltKCkgPT0gIiAiIHx8IHZhbHVlLnRyaW0oKS5pc0VtcHR5KCkpIHsgDQogICAgICByZXR1cm4gZmllbGQNCiAgICB9IGVsc2Ugew0KICAgICAgaWYgKHZhbHVlLnRyaW0oKSA9PSAiPyIpIHsgLy8gQmxhbmsgdmFsdWUgaWYgPyANCiAgICAgICAgcmV0dXJuICIiDQogICAgICB9IGVsc2UgeyANCiAgICAgICAgcmV0dXJuIHZhbHVlDQogICAgICB9DQogICAgfSANCiAgfQ0KfQ=="}}}