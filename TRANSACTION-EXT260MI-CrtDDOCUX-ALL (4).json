{"programModules":{"EXT260MI":{"program":"EXT260MI","triggers":{},"transactions":{"CrtDDOCUX":{"sourceUuid":"6ee637f0-edad-4d0c-bd92-eb72029740ca","name":"CrtDDOCUX","program":"EXT260MI","description":"Add record in DDOCUX","active":true,"multi":false,"modified":1742916316337,"modifiedBy":"EXT_SK","outputFields":[],"inputFields":[{"name":"INOU","description":"Direction","length":1,"mandatory":true,"type":"N","refField":null},{"name":"DONR","description":"Documentnumber","length":3,"mandatory":true,"type":"A","refField":null},{"name":"DOVA","description":"Documentvariant","length":2,"mandatory":false,"type":"A","refField":null},{"name":"KCON","description":"Shipment","length":7,"mandatory":false,"type":"N","refField":null}],"utilities":[],"market":"ALL"}},"batches":{},"advancedPrograms":{}}},"utilities":{},"sources":{"6ee637f0-edad-4d0c-bd92-eb72029740ca":{"uuid":"6ee637f0-edad-4d0c-bd92-eb72029740ca","updated":1742917332963,"updatedBy":"EXT_SK","created":1740060874054,"createdBy":"EXT_SK","apiVersion":"0.21","beVersion":"16.0.0.20250122200256.4","language":"GROOVY","codeHash":"A1A79FC03CE2317C24ED7D16D39E89E688CE638915CC86070DBCA1FFBCDA4964","code":""}}}