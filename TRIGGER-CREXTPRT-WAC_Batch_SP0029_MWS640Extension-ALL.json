{"programModules":{"CREXTPRT":{"program":"CREXTPRT","triggers":{"WAC_Batch_SP0029_MWS640Extension":{"name":"WAC_Batch_SP0029_MWS640Extension","method":"extendOutput","advice":"POST","active":false,"modified":1752569491609,"modifiedBy":"EXT_SK","sourceUuid":"a6d2ea81-de89-48b5-aab2-d62a9344e3e7","programName":"CREXTPRT","utilities":[],"type":"METHOD","priority":500,"market":"ALL"}},"transactions":{},"batches":{},"advancedPrograms":{}}},"utilities":{},"sources":{"a6d2ea81-de89-48b5-aab2-d62a9344e3e7":{"uuid":"a6d2ea81-de89-48b5-aab2-d62a9344e3e7","updated":1752570805327,"updatedBy":"EXT_SK","created":1752569491609,"createdBy":"EXT_SK","apiVersion":"UNKNOWN","beVersion":"16.0.0.20250521011729.6","language":"GROOVY","codeHash":"ED7B686E8B901738DEE3E4E98595A1B29FD6BC52FB233AFD2EFFD68680FB5A4D","code":""}}}