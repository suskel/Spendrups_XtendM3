{"programModules":{"EXT100MI":{"program":"EXT100MI","triggers":{},"transactions":{"RemoveRefOrd":{"sourceUuid":"e0d86beb-c294-437a-9adc-d34932d36cc1","name":"RemoveRefOrd","program":"EXT100MI","description":"Update MGLINE, clear reforder","active":true,"multi":false,"modified":1740555882830,"modifiedBy":"EXT_SK","outputFields":[],"inputFields":[{"name":"TRNR","description":"Transactionnumber","length":10,"mandatory":true,"type":"A","refField":null},{"name":"PONR","description":"Linenumber","length":5,"mandatory":true,"type":"N","refField":null},{"name":"POSX","description":"Linenumber suffix","length":3,"mandatory":false,"type":"N","refField":null},{"name":"RSCD","description":"Reason code","length":3,"mandatory":false,"type":"A","refField":null}],"utilities":[],"market":"ALL"}},"batches":{},"advancedPrograms":{}}},"utilities":{},"sources":{"e0d86beb-c294-437a-9adc-d34932d36cc1":{"uuid":"e0d86beb-c294-437a-9adc-d34932d36cc1","updated":1754652758620,"updatedBy":"EXT_SK","created":1738246994213,"createdBy":"EXT_SK","apiVersion":"0.15","beVersion":"16.0.0.20250521011729.6","language":"GROOVY","codeHash":"C50618E56D3CE92C56204D2B3365D9D2D891DB311638A46C0A08266B900F0DDC","code":""}}}