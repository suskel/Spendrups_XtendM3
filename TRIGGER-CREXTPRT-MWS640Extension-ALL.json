{"programModules":{"CREXTPRT":{"program":"CREXTPRT","triggers":{"MWS640Extension":{"name":"MWS640Extension","method":"extendOutput","advice":"POST","active":true,"modified":1751277769235,"modifiedBy":"EXT_SK","sourceUuid":"ba9fbfbb-dea3-462f-96f5-54f72bf75ebd","programName":"CREXTPRT","utilities":[],"type":"METHOD","priority":500,"market":"ALL"}},"transactions":{},"batches":{},"advancedPrograms":{}}},"utilities":{},"sources":{"ba9fbfbb-dea3-462f-96f5-54f72bf75ebd":{"uuid":"ba9fbfbb-dea3-462f-96f5-54f72bf75ebd","updated":1751277753333,"updatedBy":"EXT_SK","created":1751277517903,"createdBy":"EXT_SK","apiVersion":"0.21","beVersion":"16.0.0.20250414161800.6","language":"GROOVY","codeHash":"DA6ED92510CB72A57E82FCD6A408467B2C6A041556EC23E80A16EA37C9BD1FE4","code":""}}}